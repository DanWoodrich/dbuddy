}
if(substr(data$SFsh[1],1,5)=="EA-RW"){
#for this case, not predictable based on old naming, so use a lookup table.
lookup<-read.csv("C:/Users/daniel.woodrich/Desktop/database/mooring_name_lookup.csv")
#find the mooring name in lookup and replace.
MooringName<-lookup$New.mooring.name[which(lookup$Old.B.drive.name == data$MooringName[1])]
data$MooringName<-MooringName
data$SFsh<-paste("EA-RW",substr(MooringName,nchar(MooringName)-3,nchar(MooringName)),substr(data$SFsh,8,nchar(data$SFsh)),sep="")
}
if(substr(data$SFsh[1],1,5)=="AU-CZ"){
#for this case, not predictable based on old naming, so use a lookup table.
lookup<-read.csv("C:/Users/daniel.woodrich/Desktop/database/mooring_name_lookup.csv")
if(data$MooringName[1]=="CZ11_AU_IC1c"){ #this is jenk, just designed to catch 1 case of this
MooringName<-"CZ11_AU_IC01-03"
data$MooringName<-MooringName
#hardcoded basically
data$SFsh<-paste("AU-CZIC01_03",substr(data$SFsh,9,nchar(data$SFsh)),sep="")
}else{
MooringName<-lookup$New.mooring.name[which(lookup$Old.B.drive.name == data$MooringName[1])]
data$MooringName<-MooringName
data$SFsh<-paste("AU-CZ",substr(MooringName,nchar(MooringName)-3,nchar(MooringName)),substr(data$SFsh,8,nchar(data$SFsh)),sep="")
}
#find the mooring name in lookup and replace.
}
NASpath<-paste("/",data$MooringName,"/",month,"_",year,"/",sep="")
outData<-data.frame(cbind(as.character(data$SFsh),NASpath,dateTimeFormat,data$Duration,as.character(data$MooringName),data$SegStart,data$SegDur,siteID))
colnames(outData)<-c("FileName","FullPath","StartTime","Duration","Deployment","SegStart","SegDur","SiteID")
#modify saved name as well
if(source!="DCLDE2013"){
und5<-gregexpr("_",SfilesName)[[1]][5]
saveName<-substr(SfilesName,gregexpr("_",SfilesName)[[1]][3],und5-1)
saveName<-paste(data$MooringName[1],saveName,sep="")
}else{
saveName<-data$MooringID[1]
}
#before saving, need to loop through each file, call readwave2 to get duration. Then, remove redunant rows.
#need to edit this: could combine into fewer segments, but should work fine without this step
#outData<-outData[which(!duplicated(outData$FileName)),]
NASpath = "//161.55.120.117/NMML_AcousticsData/Audio_Data/Waves"
#this will be file duration, but save original duration as 'segDur'.
pathsave=""
for(i in 1:nrow(outData)){
print(paste(i,"of",nrow(outData)))
path = paste(NASpath,outData[i,"FullPath"],outData[i,"FileName"],sep="")
if(path!=pathsave){
if(!file.exists(path)){
newdigit = as.character(as.integer(substr(path,nchar(path)-4,nchar(path)-4))+1)
path = paste(substr(path,1,nchar(path)-5),newdigit,".wav",sep="")
outData[i,"FileName"]<-paste(substr(outData[i,"FileName"],1,nchar(outData[i,"FileName"])-5),newdigit,".wav",sep="")
outData[i,"StartTime"]<-paste(substr(outData[i,"StartTime"],1,nchar(outData[i,"StartTime"])-1),newdigit,sep="")
outData[i,"SegStart"]<-as.numeric(outData[i,"SegStart"])-1
outData[i,"SegDur"]<-as.numeric(outData[i,"SegDur"])+1
}
#if()
info<-readWave2(path,header = TRUE)
outData[i,"Duration"]<-round(info$samples/info$sample.rate)
}else{
outData[i,"Duration"]<-round(info$samples/info$sample.rate)
}
pathsave=path
}
#write.csv(outData,paste("C:/Apps/INSTINCT/Data/FileGroups/",saveName,".csv",sep=""),row.names = FALSE)
write.csv(outData,paste("C:/Users/daniel.woodrich/Desktop/database/FileGroups/",saveName,"_rb_hg.csv",sep=""),row.names = FALSE)
#depreciated
if(transferSF=="y"){
mooringFolder<-as.character(data$MooringName[1])
if(SpeciesDo=="y"){
mooringFolderFull<-paste("//akc0ss-n086/NMML_CAEP_Acoustics/Detector/HG_datasets/",mooringFolder,"/",Species,"_yesUnion/",saveName,"_",DecimateShort,"/",sep="")
}else{
mooringFolderFull<-paste("//akc0ss-n086/NMML_CAEP_Acoustics/Detector/Full_datasets/",mooringFolder,"/",saveName,"_",DecimateShort,"/",sep="")
}
#Filestart<-as.numeric(substr(saveName,gregexpr("_",saveName)[[1]][4]+1,gregexpr("-",saveName)[[1]][1]-1))
#Fileend<-as.numeric(substr(saveName,gregexpr("-",saveName)[[1]][1]+1,nchar(saveName)))
filesFullp<-paste(mooringFolderFull,dir(mooringFolderFull,pattern=".wav"),sep="") #[Filestart:Fileend]
path<- paste("C:/Apps/INSTINCT/Data/SoundFiles/",mooringFolder,sep="")
dir.create(path)
file.copy(filesFullp,path)
}
}
library(doParallel)
Species<-"RB"
Decimate<-"No_whiten_decimate_by_4"
DecimateShort<-"decimate_by_4"
folderName<-paste("//akc0ss-n086/NMML_CAEP_Acoustics/Detector/Combined_sound_files",Species,Decimate,sep="/")
#find .csv files in folder
files<-dir(folderName,pattern=".csv")
transferSF<-"n"
source<-"old"
for(n in files){
SfilesName<-n
data<-read.csv(paste(folderName,SfilesName,sep="/"))
data$SFsh<-gsub("_", "-", data$SFsh)
#for the outData, need to calculate difference to actual file start (sec in last 3 digits)
mss<-paste("0",substr(data$SFsh,nchar(data$SFsh)-6,nchar(data$SFsh)-4),sep="")
vals<-as.POSIXlt(mss,format="%M%S")
vals<- vals$sec+vals$min*60
dash2<-gregexpr("-",data$SFsh[1])[[1]][2]
dot1<-gregexpr("\\.",data$SFsh[1])[[1]][1]
dateTimeFormat<-substr(data$SFsh,dash2+1,dot1-1)
if(source!="DCLDE2013"){
if(!any(!nchar(dateTimeFormat)==15)){
dateTimeFormat<-paste(substr(dateTimeFormat,3,12),"000",sep="")
}
}else{
dateTimeFormat<-substr(dateTimeFormat,3,15)
}
data$SFsh<-paste(substr(data$SFsh,1,dash2),dateTimeFormat,".wav",sep="")
und3<-gregexpr("_",data$MooringName[1])[[1]][2]
siteID<-substr(data$MooringName,und3+1,nchar(as.character(data$MooringName[1])))
outData<-data.frame(cbind(as.character(data$SFsh),"/",dateTimeFormat,data$Duration,as.character(data$MooringName),siteID,vals))
colnames(outData)<-c("FileName","FullPath","StartTime","Duration","Deployment","SiteID","pngFileDiff")
outData$Duration<-as.numeric(as.character(outData$Duration))
outData$FileName<-as.character(outData$FileName)
if(source!="DCLDE2013"){
outData$pngFileDiff<-vals
}else{
outData$pngFileDiff<-0
}
und5<-gregexpr("_",SfilesName)[[1]][5]
saveName<-substr(SfilesName,1,und5-1)
#load in the GT data
GTfileName<-paste("//akc0ss-n086/NMML_CAEP_Acoustics/Detector/RavenBLEDscripts/Data/Selection tables/",Species,"/",data$MooringName[1],"Sum/",saveName,".txt",sep="")
GTdata<-read.delim(GTfileName,row.names=NULL)
GTdata<-GTdata[which(GTdata$View=="Spectrogram 1"),]
GTdata$Begin.Time..s.<-as.numeric(GTdata$Begin.Time..s.)
GTdata$End.Time..s.<-as.numeric(GTdata$End.Time..s.)
outData$cumsum<- cumsum(outData$Duration)-outData$Duration[1]
outData$cumsum<- c(0,cumsum(outData$Duration)[1:(nrow(outData)-1)])
#outData$cumsum<- cumsum(outData$Duration)
#this is a super jenk way to do this but this part doesn't need to scale so I don't care
values<-foreach(i=1:nrow(GTdata)) %do% {
#for(i in 1:nrow(GTdata)){
startFile<-"UK"
k=1
while(startFile=="UK"&k<=nrow(outData)){
if(GTdata$Begin.Time..s.[i]<outData$cumsum[k]){
startFile<-outData$FileName[k-1]
startTime<-GTdata$Begin.Time..s.[i]-outData$cumsum[k-1]
startTime2<-startTime+outData$pngFileDiff[k-1]
}else{
k=k+1
}
}
if(k>nrow(outData)){
startFile<-outData$FileName[k-1]
startTime<-GTdata$Begin.Time..s.[i]-outData$cumsum[k-1]
startTime2<-startTime+outData$pngFileDiff[k-1]
}
endFile<-"UK"
k=1
while(endFile=="UK"&k<=nrow(outData)){
if(GTdata$End.Time..s.[i]<outData$cumsum[k]){
endFile<-outData$FileName[k-1]
endTime<-GTdata$End.Time..s.[i]-outData$cumsum[k-1]
endTime2<-endTime+outData$pngFileDiff[k-1]
}else{
k=k+1
}
}
if(k>nrow(outData)){
endFile<-outData$FileName[k-1]
endTime<-GTdata$End.Time..s.[i]-outData$cumsum[k-1]
endTime2<-endTime+outData$pngFileDiff[k-1]
}
return(c(startTime2,endTime2,startFile,endFile))
}
values<-do.call("rbind",values)
GTout<-data.frame(values[,c(1,2)],GTdata$Low.Freq..Hz.,GTdata$High.Freq..Hz.,values[,c(3,4)])
colnames(GTout)<-c("StartTime","EndTime","LowFreq","HighFreq","StartFile","EndFile")
GTout$label<-"y"
GTout$Type<-"i_neg"
GTout$SignalCode<-Species
#modify stuff to be compatable with new NAS naming. change mooring name (save name), and wav names
MooringName<-substr(SfilesName,1,gregexpr("_",SfilesName)[[1]][3]-1)
#also, rename wavs if applicable:
if(substr(GTout$StartFile[1],1,5)=="AU-BS"){
MooringSite<-substr(GTout$StartFile[1],6,7)
#if a BS mooring, find the #, then
newWavName<-paste("AU-BSPM",MooringSite,sep="")
MooringName<-paste(substr(data$MooringName[1],1,8),"PM",MooringSite,sep="")
if((substr(GTout$StartFile[1],8,8)=="a"|substr(GTout$StartFile[1],8,8)=="b")&MooringSite=="02"){
newWavName<-paste(newWavName,substr(GTout$StartFile[1],8,8),sep="_")
MooringName<-paste(MooringName,substr(GTout$StartFile[1],8,8),sep="-")
}
dash2<-gregexpr("-",GTout$StartFile[1])[[1]][2]
dot1<-gregexpr("\\.",GTout$StartFile[1])[[1]][1]
dateTimeFormatStart<-substr(GTout$StartFile,dash2+1,dot1-1)
dateTimeFormatEnd<-substr(GTout$EndFile,dash2+1,dot1-1)
GTout$StartFile<-paste(newWavName,"-",dateTimeFormatStart,".wav",sep="")
GTout$EndFile<-paste(newWavName,"-",dateTimeFormatEnd,".wav",sep="")
}
if(substr(data$SFsh[1],1,5)=="AU-AL"|substr(data$SFsh[1],1,5)=="AU-AW"){
#do not need to change .wav names
#only works with single digit, but that's ok I think just for backwards conversion of this limited set
MooringSite<-substr(MooringName,11,12)
#if a BS mooring, find the #, then
MooringName<-paste(substr(MooringName[1],1,10),"0",MooringSite,sep="")
}
if(substr(data$SFsh[1],1,5)=="EA-RW"){
#for this case, not predictable based on old naming, so use a lookup table.
lookup<-read.csv("C:/Users/daniel.woodrich/Desktop/database/mooring_name_lookup.csv")
#find the mooring name in lookup and replace.
MooringName<-lookup$New.mooring.name[which(lookup$Old.B.drive.name == data$MooringName[1])]
MooringSite<-substr(MooringName,11,12)
#data$SFsh<-paste("EA-RW",substr(MooringName,nchar(MooringName)-3,nchar(MooringName)),substr(data$SFsh,8,nchar(data$SFsh)),sep="")
}
if(substr(data$SFsh[1],1,5)=="AU-CZ"){
#for this case, not predictable based on old naming, so use a lookup table.
lookup<-read.csv("C:/Users/daniel.woodrich/Desktop/database/mooring_name_lookup.csv")
if(data$MooringName[1]=="CZ11_AU_IC1c"){ #this is jenk, just designed to catch 1 case of this
MooringName<-"CZ11_AU_IC01-03"
MooringSite<-"IC01"
#data$MooringName<-MooringName
#hardcoded basically
#data$SFsh<-paste("AU-CZIC01_03",substr(data$SFsh,9,nchar(data$SFsh)),sep="")
}else{
MooringName<-lookup$New.mooring.name[which(lookup$Old.B.drive.name == data$MooringName[1])]
#data$MooringName<-MooringName
#data$SFsh<-paste("AU-CZ",substr(MooringName,nchar(MooringName)-3,nchar(MooringName)),substr(data$SFsh,8,nchar(data$SFsh)),sep="")
}
#find the mooring name in lookup and replace.
}
saveName<-paste(Species,MooringName,substr(SfilesName,gregexpr("_",SfilesName)[[1]][3]+1,und5-1),sep="_")
#write.csv(GTout,paste("C:/Apps/INSTINCT/Data/GroundTruth/",Species,"/",saveName,".csv",sep=""),row.names = FALSE)
#if(grepl("RW",saveName)){
#  stop()
#}
write.csv(GTout,paste("C:/Users/daniel.woodrich/Desktop/database/GroundTruth/",Species,"/",saveName,"_rb_hg.csv",sep=""),row.names = FALSE)
}
library(doParallel)
Species<-"RB"
Decimate<-"No_whiten_decimate_by_4"
DecimateShort<-"decimate_by_4"
folderName<-paste("//akc0ss-n086/NMML_CAEP_Acoustics/Detector/Combined_sound_files",Species,Decimate,sep="/")
#find .csv files in folder
files<-dir(folderName,pattern=".csv")
transferSF<-"n"
source<-"old"
for(n in files){
SfilesName<-n
data<-read.csv(paste(folderName,SfilesName,sep="/"))
data$SFsh<-gsub("_", "-", data$SFsh)
#for the outData, need to calculate difference to actual file start (sec in last 3 digits)
mss<-paste("0",substr(data$SFsh,nchar(data$SFsh)-6,nchar(data$SFsh)-4),sep="")
vals<-as.POSIXlt(mss,format="%M%S")
vals<- vals$sec+vals$min*60
dash2<-gregexpr("-",data$SFsh[1])[[1]][2]
dot1<-gregexpr("\\.",data$SFsh[1])[[1]][1]
dateTimeFormat<-substr(data$SFsh,dash2+1,dot1-1)
if(source!="DCLDE2013"){
if(!any(!nchar(dateTimeFormat)==15)){
dateTimeFormat<-paste(substr(dateTimeFormat,3,12),"000",sep="")
}
}else{
dateTimeFormat<-substr(dateTimeFormat,3,15)
}
data$SFsh<-paste(substr(data$SFsh,1,dash2),dateTimeFormat,".wav",sep="")
und3<-gregexpr("_",data$MooringName[1])[[1]][2]
siteID<-substr(data$MooringName,und3+1,nchar(as.character(data$MooringName[1])))
outData<-data.frame(cbind(as.character(data$SFsh),"/",dateTimeFormat,data$Duration,as.character(data$MooringName),siteID,vals))
colnames(outData)<-c("FileName","FullPath","StartTime","Duration","Deployment","SiteID","pngFileDiff")
outData$Duration<-as.numeric(as.character(outData$Duration))
outData$FileName<-as.character(outData$FileName)
if(source!="DCLDE2013"){
outData$pngFileDiff<-vals
}else{
outData$pngFileDiff<-0
}
und5<-gregexpr("_",SfilesName)[[1]][5]
saveName<-substr(SfilesName,1,und5-1)
#load in the GT data
GTfileName<-paste("//akc0ss-n086/NMML_CAEP_Acoustics/Detector/RavenBLEDscripts/Data/Selection tables/",Species,"/",data$MooringName[1],"Sum/",saveName,".txt",sep="")
GTdata<-read.delim(GTfileName,row.names=NULL)
GTdata<-GTdata[which(GTdata$View=="Spectrogram 1"),]
GTdata$Begin.Time..s.<-as.numeric(GTdata$Begin.Time..s.)
GTdata$End.Time..s.<-as.numeric(GTdata$End.Time..s.)
outData$cumsum<- cumsum(outData$Duration)-outData$Duration[1]
outData$cumsum<- c(0,cumsum(outData$Duration)[1:(nrow(outData)-1)])
#outData$cumsum<- cumsum(outData$Duration)
#this is a super jenk way to do this but this part doesn't need to scale so I don't care
values<-foreach(i=1:nrow(GTdata)) %do% {
#for(i in 1:nrow(GTdata)){
startFile<-"UK"
k=1
while(startFile=="UK"&k<=nrow(outData)){
if(GTdata$Begin.Time..s.[i]<outData$cumsum[k]){
startFile<-outData$FileName[k-1]
startTime<-GTdata$Begin.Time..s.[i]-outData$cumsum[k-1]
startTime2<-startTime+outData$pngFileDiff[k-1]
}else{
k=k+1
}
}
if(k>nrow(outData)){
startFile<-outData$FileName[k-1]
startTime<-GTdata$Begin.Time..s.[i]-outData$cumsum[k-1]
startTime2<-startTime+outData$pngFileDiff[k-1]
}
endFile<-"UK"
k=1
while(endFile=="UK"&k<=nrow(outData)){
if(GTdata$End.Time..s.[i]<outData$cumsum[k]){
endFile<-outData$FileName[k-1]
endTime<-GTdata$End.Time..s.[i]-outData$cumsum[k-1]
endTime2<-endTime+outData$pngFileDiff[k-1]
}else{
k=k+1
}
}
if(k>nrow(outData)){
endFile<-outData$FileName[k-1]
endTime<-GTdata$End.Time..s.[i]-outData$cumsum[k-1]
endTime2<-endTime+outData$pngFileDiff[k-1]
}
return(c(startTime2,endTime2,startFile,endFile))
}
values<-do.call("rbind",values)
GTout<-data.frame(values[,c(1,2)],GTdata$Low.Freq..Hz.,GTdata$High.Freq..Hz.,values[,c(3,4)])
colnames(GTout)<-c("StartTime","EndTime","LowFreq","HighFreq","StartFile","EndFile")
GTout$label<-"y"
GTout$Type<-"i_neg"
GTout$SignalCode<-Species
#modify stuff to be compatable with new NAS naming. change mooring name (save name), and wav names
MooringName<-substr(SfilesName,1,gregexpr("_",SfilesName)[[1]][3]-1)
#also, rename wavs if applicable:
if(substr(GTout$StartFile[1],1,5)=="AU-BS"){
MooringSite<-substr(GTout$StartFile[1],6,7)
#if a BS mooring, find the #, then
newWavName<-paste("AU-BSPM",MooringSite,sep="")
MooringName<-paste(substr(data$MooringName[1],1,8),"PM",MooringSite,sep="")
if((substr(GTout$StartFile[1],8,8)=="a"|substr(GTout$StartFile[1],8,8)=="b")&MooringSite=="02"){
newWavName<-paste(newWavName,substr(GTout$StartFile[1],8,8),sep="_")
MooringName<-paste(MooringName,substr(GTout$StartFile[1],8,8),sep="-")
}
dash2<-gregexpr("-",GTout$StartFile[1])[[1]][2]
dot1<-gregexpr("\\.",GTout$StartFile[1])[[1]][1]
dateTimeFormatStart<-substr(GTout$StartFile,dash2+1,dot1-1)
dateTimeFormatEnd<-substr(GTout$EndFile,dash2+1,dot1-1)
GTout$StartFile<-paste(newWavName,"-",dateTimeFormatStart,".wav",sep="")
GTout$EndFile<-paste(newWavName,"-",dateTimeFormatEnd,".wav",sep="")
}
if(substr(data$SFsh[1],1,5)=="AU-AL"|substr(data$SFsh[1],1,5)=="AU-AW"){
#do not need to change .wav names
#only works with single digit, but that's ok I think just for backwards conversion of this limited set
MooringSite<-substr(MooringName,11,12)
#if a BS mooring, find the #, then
MooringName<-paste(substr(MooringName[1],1,10),"0",MooringSite,sep="")
}
if(substr(data$SFsh[1],1,5)=="EA-RW"){
#for this case, not predictable based on old naming, so use a lookup table.
lookup<-read.csv("C:/Users/daniel.woodrich/Desktop/database/mooring_name_lookup.csv")
#find the mooring name in lookup and replace.
MooringName<-lookup$New.mooring.name[which(lookup$Old.B.drive.name == data$MooringName[1])]
MooringSite<-substr(MooringName,11,12)
#data$SFsh<-paste("EA-RW",substr(MooringName,nchar(MooringName)-3,nchar(MooringName)),substr(data$SFsh,8,nchar(data$SFsh)),sep="")
}
if(substr(data$SFsh[1],1,5)=="AU-CZ"){
#for this case, not predictable based on old naming, so use a lookup table.
lookup<-read.csv("C:/Users/daniel.woodrich/Desktop/database/mooring_name_lookup.csv")
if(data$MooringName[1]=="CZ11_AU_IC1c"){ #this is jenk, just designed to catch 1 case of this
MooringName<-"CZ11_AU_IC01-03"
MooringSite<-"IC01"
#data$MooringName<-MooringName
#hardcoded basically
#data$SFsh<-paste("AU-CZIC01_03",substr(data$SFsh,9,nchar(data$SFsh)),sep="")
}else{
MooringName<-lookup$New.mooring.name[which(lookup$Old.B.drive.name == data$MooringName[1])]
#data$MooringName<-MooringName
#data$SFsh<-paste("AU-CZ",substr(MooringName,nchar(MooringName)-3,nchar(MooringName)),substr(data$SFsh,8,nchar(data$SFsh)),sep="")
}
#find the mooring name in lookup and replace.
}
saveName<-paste(Species,MooringName,substr(SfilesName,gregexpr("_",SfilesName)[[1]][3]+1,und5-1),sep="_")
#write.csv(GTout,paste("C:/Apps/INSTINCT/Data/GroundTruth/",Species,"/",saveName,".csv",sep=""),row.names = FALSE)
#if(grepl("RW",saveName)){
#  stop()
#}
write.csv(GTout,paste("C:/Users/daniel.woodrich/Desktop/database/GroundTruth/",Species,"/",saveName,"_rb_hg.csv",sep=""),row.names = FALSE)
}
#install.packages("RSQLite")
setwd("C:/Users/daniel.woodrich/Desktop/database/dbuddy/lib")
source("classes.R")
source("dbcon.R")
lookup_datatype<-read.csv("../etc/DataTypeLookupR_SQLite3.csv")
lookup_datatype$R_name[which(is.na(lookup_datatype$R_name))]<-"NA"
lookup_datatype
lookup_datatype$R_name[which(is.na(lookup_datatype$R_name))]<-"NA"
#make a db connection, and set some standard pragma settings.
con <-standard_con()
#based on the syntax, translate to a class method.
args<-commandArgs(trailingOnly = TRUE)
print(args)
bins()
soundfiles()$view_()
source("classes.R")
soundfiles()$view_()
bins()$view_()
bins()$getschema()
testbindata <-data.frame(c("1","2"),c("1","2"),c(1,2),c(3,4))
colnames(testbindata)<-bins()$getschema()$name
testbindata
bins()$insert(testbindata)
bins()$view_()
bins()$getschema()
wrongdatatype <-data.frame(c(1,2),c("1","2"),c(1,2),c(3,4))
bins()$insert(wrongdatatype)
#now try inserting data that worked before, again:
bins()$insert(testbindata)
bins()$view_()
#now delete dummy data from bins
bins()$table_delete(testbindata$id)
bins()$view_()
dbDisconnect(con)
#make a db connection, and set some standard pragma settings.
con <-standard_con()
soundfiles()$getschema()
deployments()$view_()
deployments()$table_delete("Name")
deployments()$view_()
dbDisconnect(con)
#make a db connection, and set some standard pragma settings.
con <-standard_con()
deployments()$view_()
deployments()$view_()
bins()$view_()
deployments()$table_delete("Name")
bins()$view_()
dbDisconnect(con)
#make a db connection, and set some standard pragma settings.
con <-standard_con()
#deployments()$table_delete("Name")
deployments()$view_()
#now try inserting data that worked before, again:
bins()$insert(testbindata)
bins()$view_()
dbDisconnect(con)
#make a db connection, and set some standard pragma settings.
con <-standard_con()
bins()$view_()
deployments()$table_delete("Name")
#now try inserting data that worked before, again:
bins()$insert(testbindata)
dbCommit(con)
dbDisconnect(con)
#make a db connection, and set some standard pragma settings.
con <-standard_con()
deployments()$view_()
bins()$view_()
#now delete dummy data from bins
bins()$table_delete(testbindata$id)
dbCommit(con)
dbDisconnect(con)
deployments()$getschema()
#make a db connection, and set some standard pragma settings.
con <-standard_con()
deployments()$getschema()
deploymentsdummy<-c("testmanual",30,50,42,38,4,40,6,"then","later",16384,"PST","M2",1)
deployments()$insert(deploymentsdummy)
length(deploymentsdummy)
deploymentsdummy<-c("testmanual",30,50,42,38,4,40,"then","later",16384,"PST","M2",1)
length(deploymentsdummy)
deployments()$insert(deploymentsdummy)
source("classes.R")
deployments()$insert(deploymentsdummy)
deployments()$insert(deploymentsdummy)
source("classes.R")
deployments()$insert(deploymentsdummy)
source("classes.R")
deployments()$insert(deploymentsdummy)
class(deploymentsdummy)
deploymentsdummy<-data.frame("testmanual",30,50,42,38,4,40,"then","later",16384,"PST","M2",1)
View(deploymentsdummy)
deploymentsdummy<-c("testmanual",30,50,42,38,4,40,"then","later",16384,"PST","M2",1)
source("classes.R")
colnames(deploymentsdummy)<-bins()$getschema()$name
deploymentsdummy<-c("testmanual",30,50,42,38,4,40,"then","later",16384,"PST","M2",1)
deployments()$insert(deploymentsdummy)
source("classes.R")
deployments()$insert(deploymentsdummy)
source("classes.R")
source("classes.R")
deployments()$insert(deploymentsdummy)
deploymentsdummy<-data.frame("testmanual",30,50,42,38,4,40,"then","later",16384,"PST","M2",1)
colnames(deploymentsdummy)<-bins()$getschema()$name
deployments()$insert(deploymentsdummy)
source("classes.R")
deployments()$insert(deploymentsdummy)
deploymentsdummy
deploymentsdummy<-data.frame("testmanual",30,50,42,38,4,40,"then","later",16384,"PST","M2",1)
colnames(deploymentsdummy)<-deployments()$getschema()$name
deployments()$insert(deploymentsdummy)
deployments()$getschema()
deployments()$view_()
source("classes.R")
deploymentsdummy<-data.frame("testmanual",30,50,42,38,4,40,"then","later",16384,"PST","M2",1)
colnames(deploymentsdummy)<-deployments()$getschema()$name
deployments()$insert(deploymentsdummy)
class(deploymentsdummy)
class(deploymentsdummy[1,])
str(deploymentsdummy)
as.integer(42)
deploymentsdummy<-data.frame("testmanual",30,50,as.integer(42),38,4,40,"then","later",16384,"PST","M2",1)
colnames(deploymentsdummy)<-deployments()$getschema()$name
deployments()$insert(deploymentsdummy)
deploymentsdummy<-data.frame("testmanual",30,50,as.integer(42),38,4,40,"then","later",as.integer(16384),"PST","M2",as.integer(1))
colnames(deploymentsdummy)<-deployments()$getschema()$name
deployments()$insert(deploymentsdummy)
dbuddy
#make a db connection, and set some standard pragma settings.
con <-standard_con()
#see schema of bin table
bins()$getschema()
