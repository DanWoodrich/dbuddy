startTime2<-startTime+outData$pngFileDiff[k-1]
}
endFile<-"UK"
k=1
while(endFile=="UK"&k<=nrow(outData)){
if(GTdata$End.Time..s.[i]<outData$cumsum[k]){
endFile<-outData$FileName[k-1]
endTime<-GTdata$End.Time..s.[i]-outData$cumsum[k-1]
endTime2<-endTime+outData$pngFileDiff[k-1]
}else{
k=k+1
}
}
if(k>nrow(outData)){
endFile<-outData$FileName[k-1]
endTime<-GTdata$End.Time..s.[i]-outData$cumsum[k-1]
endTime2<-endTime+outData$pngFileDiff[k-1]
}
return(c(startTime2,endTime2,startFile,endFile))
}
values<-do.call("rbind",values)
GTout<-data.frame(values[,c(1,2)],GTdata$Low.Freq..Hz.,GTdata$High.Freq..Hz.,values[,c(3,4)])
colnames(GTout)<-c("StartTime","EndTime","LowFreq","HighFreq","StartFile","EndFile")
GTout$label<-"y"
GTout$Type<-"i_neg"
GTout$SignalCode<-Species
#modify stuff to be compatable with new NAS naming. change mooring name (save name), and wav names
MooringName<-substr(SfilesName,1,gregexpr("_",SfilesName)[[1]][3]-1)
#also, rename wavs if applicable:
if(substr(GTout$StartFile[1],1,5)=="AU-BS"){
MooringSite<-substr(GTout$StartFile[1],6,7)
#if a BS mooring, find the #, then
newWavName<-paste("AU-BSPM",MooringSite,sep="")
MooringName<-paste(substr(data$MooringName[1],1,8),"PM",MooringSite,sep="")
if((substr(GTout$StartFile[1],8,8)=="a"|substr(GTout$StartFile[1],8,8)=="b")&MooringSite=="02"){
newWavName<-paste(newWavName,substr(GTout$StartFile[1],8,8),sep="_")
MooringName<-paste(MooringName,substr(GTout$StartFile[1],8,8),sep="-")
}
dash2<-gregexpr("-",GTout$StartFile[1])[[1]][2]
dot1<-gregexpr("\\.",GTout$StartFile[1])[[1]][1]
dateTimeFormatStart<-substr(GTout$StartFile,dash2+1,dot1-1)
dateTimeFormatEnd<-substr(GTout$EndFile,dash2+1,dot1-1)
GTout$StartFile<-paste(newWavName,"-",dateTimeFormatStart,".wav",sep="")
GTout$EndFile<-paste(newWavName,"-",dateTimeFormatEnd,".wav",sep="")
}
if(substr(data$SFsh[1],1,5)=="AU-AL"|substr(data$SFsh[1],1,5)=="AU-AW"){
#do not need to change .wav names
#only works with single digit, but that's ok I think just for backwards conversion of this limited set
MooringSite<-substr(MooringName,11,12)
#if a BS mooring, find the #, then
MooringName<-paste(substr(MooringName[1],1,10),"0",MooringSite,sep="")
}
if(substr(data$SFsh[1],1,5)=="EA-RW"){
#for this case, not predictable based on old naming, so use a lookup table.
lookup<-read.csv("C:/Users/daniel.woodrich/Desktop/database/mooring_name_lookup.csv")
#find the mooring name in lookup and replace.
MooringName<-lookup$New.mooring.name[which(lookup$Old.B.drive.name == data$MooringName[1])]
MooringSite<-substr(MooringName,11,12)
#data$SFsh<-paste("EA-RW",substr(MooringName,nchar(MooringName)-3,nchar(MooringName)),substr(data$SFsh,8,nchar(data$SFsh)),sep="")
}
if(substr(data$SFsh[1],1,5)=="AU-CZ"){
#for this case, not predictable based on old naming, so use a lookup table.
lookup<-read.csv("C:/Users/daniel.woodrich/Desktop/database/mooring_name_lookup.csv")
if(data$MooringName[1]=="CZ11_AU_IC1c"){ #this is jenk, just designed to catch 1 case of this
MooringName<-"CZ11_AU_IC01-03"
MooringSite<-"IC01"
#data$MooringName<-MooringName
#hardcoded basically
#data$SFsh<-paste("AU-CZIC01_03",substr(data$SFsh,9,nchar(data$SFsh)),sep="")
}else{
MooringName<-lookup$New.mooring.name[which(lookup$Old.B.drive.name == data$MooringName[1])]
#data$MooringName<-MooringName
#data$SFsh<-paste("AU-CZ",substr(MooringName,nchar(MooringName)-3,nchar(MooringName)),substr(data$SFsh,8,nchar(data$SFsh)),sep="")
}
#find the mooring name in lookup and replace.
}
saveName<-paste(Species,MooringName,substr(SfilesName,gregexpr("_",SfilesName)[[1]][3]+1,und5-1),sep="_")
#write.csv(GTout,paste("C:/Apps/INSTINCT/Data/GroundTruth/",Species,"/",saveName,".csv",sep=""),row.names = FALSE)
#if(grepl("RW",saveName)){
#  stop()
#}
write.csv(GTout,paste("C:/Users/daniel.woodrich/Desktop/database/GroundTruth/",Species,"/",saveName,"_rb_hg.csv",sep=""),row.names = FALSE)
}
library(doParallel)
Species<-"RB"
Decimate<-"No_whiten_decimate_by_4"
DecimateShort<-"decimate_by_4"
folderName<-paste("//akc0ss-n086/NMML_CAEP_Acoustics/Detector/Combined_sound_files",Species,Decimate,sep="/")
#find .csv files in folder
files<-dir(folderName,pattern=".csv")
transferSF<-"n"
source<-"old"
for(n in files){
SfilesName<-n
data<-read.csv(paste(folderName,SfilesName,sep="/"))
data$SFsh<-gsub("_", "-", data$SFsh)
#for the outData, need to calculate difference to actual file start (sec in last 3 digits)
mss<-paste("0",substr(data$SFsh,nchar(data$SFsh)-6,nchar(data$SFsh)-4),sep="")
vals<-as.POSIXlt(mss,format="%M%S")
vals<- vals$sec+vals$min*60
dash2<-gregexpr("-",data$SFsh[1])[[1]][2]
dot1<-gregexpr("\\.",data$SFsh[1])[[1]][1]
dateTimeFormat<-substr(data$SFsh,dash2+1,dot1-1)
if(source!="DCLDE2013"){
if(!any(!nchar(dateTimeFormat)==15)){
dateTimeFormat<-paste(substr(dateTimeFormat,3,12),"000",sep="")
}
}else{
dateTimeFormat<-substr(dateTimeFormat,3,15)
}
data$SFsh<-paste(substr(data$SFsh,1,dash2),dateTimeFormat,".wav",sep="")
und3<-gregexpr("_",data$MooringName[1])[[1]][2]
siteID<-substr(data$MooringName,und3+1,nchar(as.character(data$MooringName[1])))
outData<-data.frame(cbind(as.character(data$SFsh),"/",dateTimeFormat,data$Duration,as.character(data$MooringName),siteID,vals))
colnames(outData)<-c("FileName","FullPath","StartTime","Duration","Deployment","SiteID","pngFileDiff")
outData$Duration<-as.numeric(as.character(outData$Duration))
outData$FileName<-as.character(outData$FileName)
if(source!="DCLDE2013"){
outData$pngFileDiff<-vals
}else{
outData$pngFileDiff<-0
}
und5<-gregexpr("_",SfilesName)[[1]][5]
saveName<-substr(SfilesName,1,und5-1)
#load in the GT data
GTfileName<-paste("//akc0ss-n086/NMML_CAEP_Acoustics/Detector/RavenBLEDscripts/Data/Selection tables/",Species,"/",data$MooringName[1],"Sum/",saveName,".txt",sep="")
GTdata<-read.delim(GTfileName,row.names=NULL)
GTdata<-GTdata[which(GTdata$View=="Spectrogram 1"),]
GTdata$Begin.Time..s.<-as.numeric(GTdata$Begin.Time..s.)
GTdata$End.Time..s.<-as.numeric(GTdata$End.Time..s.)
outData$cumsum<- cumsum(outData$Duration)-outData$Duration[1]
outData$cumsum<- c(0,cumsum(outData$Duration)[1:(nrow(outData)-1)])
#outData$cumsum<- cumsum(outData$Duration)
#this is a super jenk way to do this but this part doesn't need to scale so I don't care
values<-foreach(i=1:nrow(GTdata)) %do% {
#for(i in 1:nrow(GTdata)){
startFile<-"UK"
k=1
while(startFile=="UK"&k<=nrow(outData)){
if(GTdata$Begin.Time..s.[i]<outData$cumsum[k]){
startFile<-outData$FileName[k-1]
startTime<-GTdata$Begin.Time..s.[i]-outData$cumsum[k-1]
startTime2<-startTime+outData$pngFileDiff[k-1]
}else{
k=k+1
}
}
if(k>nrow(outData)){
startFile<-outData$FileName[k-1]
startTime<-GTdata$Begin.Time..s.[i]-outData$cumsum[k-1]
startTime2<-startTime+outData$pngFileDiff[k-1]
}
endFile<-"UK"
k=1
while(endFile=="UK"&k<=nrow(outData)){
if(GTdata$End.Time..s.[i]<outData$cumsum[k]){
endFile<-outData$FileName[k-1]
endTime<-GTdata$End.Time..s.[i]-outData$cumsum[k-1]
endTime2<-endTime+outData$pngFileDiff[k-1]
}else{
k=k+1
}
}
if(k>nrow(outData)){
endFile<-outData$FileName[k-1]
endTime<-GTdata$End.Time..s.[i]-outData$cumsum[k-1]
endTime2<-endTime+outData$pngFileDiff[k-1]
}
return(c(startTime2,endTime2,startFile,endFile))
}
values<-do.call("rbind",values)
GTout<-data.frame(values[,c(1,2)],GTdata$Low.Freq..Hz.,GTdata$High.Freq..Hz.,values[,c(3,4)])
colnames(GTout)<-c("StartTime","EndTime","LowFreq","HighFreq","StartFile","EndFile")
GTout$label<-"y"
GTout$Type<-"i_neg"
GTout$SignalCode<-Species
#modify stuff to be compatable with new NAS naming. change mooring name (save name), and wav names
MooringName<-substr(SfilesName,1,gregexpr("_",SfilesName)[[1]][3]-1)
#also, rename wavs if applicable:
if(substr(GTout$StartFile[1],1,5)=="AU-BS"){
MooringSite<-substr(GTout$StartFile[1],6,7)
#if a BS mooring, find the #, then
newWavName<-paste("AU-BSPM",MooringSite,sep="")
MooringName<-paste(substr(data$MooringName[1],1,8),"PM",MooringSite,sep="")
if((substr(GTout$StartFile[1],8,8)=="a"|substr(GTout$StartFile[1],8,8)=="b")&MooringSite=="02"){
newWavName<-paste(newWavName,substr(GTout$StartFile[1],8,8),sep="_")
MooringName<-paste(MooringName,substr(GTout$StartFile[1],8,8),sep="-")
}
dash2<-gregexpr("-",GTout$StartFile[1])[[1]][2]
dot1<-gregexpr("\\.",GTout$StartFile[1])[[1]][1]
dateTimeFormatStart<-substr(GTout$StartFile,dash2+1,dot1-1)
dateTimeFormatEnd<-substr(GTout$EndFile,dash2+1,dot1-1)
GTout$StartFile<-paste(newWavName,"-",dateTimeFormatStart,".wav",sep="")
GTout$EndFile<-paste(newWavName,"-",dateTimeFormatEnd,".wav",sep="")
}
if(substr(data$SFsh[1],1,5)=="AU-AL"|substr(data$SFsh[1],1,5)=="AU-AW"){
#do not need to change .wav names
#only works with single digit, but that's ok I think just for backwards conversion of this limited set
MooringSite<-substr(MooringName,11,12)
#if a BS mooring, find the #, then
MooringName<-paste(substr(MooringName[1],1,10),"0",MooringSite,sep="")
}
if(substr(data$SFsh[1],1,5)=="EA-RW"){
#for this case, not predictable based on old naming, so use a lookup table.
lookup<-read.csv("C:/Users/daniel.woodrich/Desktop/database/mooring_name_lookup.csv")
#find the mooring name in lookup and replace.
MooringName<-lookup$New.mooring.name[which(lookup$Old.B.drive.name == data$MooringName[1])]
MooringSite<-substr(MooringName,11,12)
#data$SFsh<-paste("EA-RW",substr(MooringName,nchar(MooringName)-3,nchar(MooringName)),substr(data$SFsh,8,nchar(data$SFsh)),sep="")
}
if(substr(data$SFsh[1],1,5)=="AU-CZ"){
#for this case, not predictable based on old naming, so use a lookup table.
lookup<-read.csv("C:/Users/daniel.woodrich/Desktop/database/mooring_name_lookup.csv")
if(data$MooringName[1]=="CZ11_AU_IC1c"){ #this is jenk, just designed to catch 1 case of this
MooringName<-"CZ11_AU_IC01-03"
MooringSite<-"IC01"
#data$MooringName<-MooringName
#hardcoded basically
#data$SFsh<-paste("AU-CZIC01_03",substr(data$SFsh,9,nchar(data$SFsh)),sep="")
}else{
MooringName<-lookup$New.mooring.name[which(lookup$Old.B.drive.name == data$MooringName[1])]
#data$MooringName<-MooringName
#data$SFsh<-paste("AU-CZ",substr(MooringName,nchar(MooringName)-3,nchar(MooringName)),substr(data$SFsh,8,nchar(data$SFsh)),sep="")
}
#find the mooring name in lookup and replace.
}
saveName<-paste(Species,MooringName,substr(SfilesName,gregexpr("_",SfilesName)[[1]][3]+1,und5-1),sep="_")
#write.csv(GTout,paste("C:/Apps/INSTINCT/Data/GroundTruth/",Species,"/",saveName,".csv",sep=""),row.names = FALSE)
#if(grepl("RW",saveName)){
#  stop()
#}
write.csv(GTout,paste("C:/Users/daniel.woodrich/Desktop/database/GroundTruth/",Species,"/",saveName,"_rb_hg.csv",sep=""),row.names = FALSE)
}
source("classes.R")
source("dbcon.R")
lookup_datatype<-read.csv("../etc/DataTypeLookupR_SQLite3.csv")
#install.packages("RSQLite")
setwd("C:/Users/daniel.woodrich/Desktop/database/dbuddy/lib")
source("classes.R")
source("dbcon.R")
lookup_datatype<-read.csv("../etc/DataTypeLookupR_SQLite3.csv")
lookup_datatype$R_name[which(is.na(lookup_datatype$R_name))]<-"NA"
#make a db connection, and set some standard pragma settings.
con <-standard_con()
deployments()$insert(deploymentsdummy)
deploymentsdummy<-data.frame("testmanual",30,50,as.integer(42),38,4,40,"then","later",as.integer(16384),"PST","M2",as.integer(1))
colnames(deploymentsdummy)<-deployments()$getschema()$name
deployments()$insert(deploymentsdummy)
deployments()$view_()
deployments()$insert("test2",'key')
deployments()$view_()
deployments()$insert("test2",'key')
deployments()$table_delete("test2")
deployments()$insert("test2",'key')
source("classes.R")
deployments()$insert("test2",'key')
source("classes.R")
deployments()$view_()
deployments()$table_delete("test2")
deployments()$table_delete("testmanual")
#show how deployments is modified when soundfiles are entered
soundfiles()$view_()
soundfiles()$getschema()
soundfiledummy<-data.frame("testSF",600,"Testdeployment")
colnames(soundfiledummy)<-soundfiledummy()$getschema()$name
soundfiledummy()$insert(soundfiledummy)
colnames(soundfiledummy)<-soundfiles()$getschema()$name
soundfiles()$insert(soundfiledummy)
soundfiledummy
soundfiles()$view_()
deployments()$view_()
soundfiles()$table_delete("testSF")
deployments()$table_delete("Testdeployment")
bins()$view_()
read.csv("C:/Users/daniel.woodrich/Desktop/database/soundfiles.csv")
sfs=read.csv("C:/Users/daniel.woodrich/Desktop/database/soundfiles.csv")
#now we see that deployments and soundfiles were both updated:
soundfiles()$view_()
source("classes.R")
soundfiles()$insert(sfs)
source("classes.R")
soundfiles()$insert(sfs)
soundfiles()$view_()
dbExecute(con, paste("DELETE FROM",soundfiles("name"))
)
soundfiles("name")
dbExecute(con, paste("DELETE FROM",soundfiles()$tableinfo("name")))
#now we see that deployments and soundfiles were both updated:
soundfiles()$view_()
source("classes.R")
soundfiles()$view_()
source("classes.R")
source("classes.R")
source("classes.R")
source("classes.R")
source("classes.R")
source("classes.R")
source("classes.R")
source("classes.R")
source("classes.R")
soundfiles()$table_clear()
soundfiles()$insert(sfs)
source("classes.R")
soundfiles()$insert(sfs)
soundfiles()$view_()
soundfiles()$table_clear()
soundfiles()$insert(sfs)
source("classes.R")
soundfiles()$table_clear()
soundfiles()$insert(sfs)
data=sfs
data$index<-1:nrow(data)
newrows<-foreach(n=1:nrow(data)) %do% {
#for(n in 1:nrow(data)){
row = data[which(data$index==n),]
#go row by row. if duration > binlen, expand row, delete old row, and stich back in.
if(row[,colname_dur]>binlen){
if(row[,colname_dur]%%binlen==0){
binints = rep(binlen,row[,colname_dur]/binlen)
binstarts = c(0,cumsum(binints))
}else{
secs = sum(rep(binlen,row[,colname_dur]/binlen))
binints = c(rep(binlen,row[,colname_dur]/binlen),row[,colname_dur]-secs)
binstarts= c(0,cumsum(binints))
}
startends<-matrix(nrow=length(binints),ncol=2)
for(p in 1:length(binints)){
startends[p,]<-c(binstarts[p],binints[p])
}
#nice, so now have intervals. create the rows
if(rowtype=="FG"){
rows = data.frame(row[,1:5],startends,row[,8:9])
}else if(rowtype=="db"){
rows = data.frame(row[,1],startends,row[,3],type)
}
data=data[-which(data$index==n),]
return(rows)
}else{
return(NULL)
}
}
binlen=225
type="MID"
colname_dur = "Duration"
rowtype= "db"
newrows<-foreach(n=1:nrow(data)) %do% {
#for(n in 1:nrow(data)){
row = data[which(data$index==n),]
#go row by row. if duration > binlen, expand row, delete old row, and stich back in.
if(row[,colname_dur]>binlen){
if(row[,colname_dur]%%binlen==0){
binints = rep(binlen,row[,colname_dur]/binlen)
binstarts = c(0,cumsum(binints))
}else{
secs = sum(rep(binlen,row[,colname_dur]/binlen))
binints = c(rep(binlen,row[,colname_dur]/binlen),row[,colname_dur]-secs)
binstarts= c(0,cumsum(binints))
}
startends<-matrix(nrow=length(binints),ncol=2)
for(p in 1:length(binints)){
startends[p,]<-c(binstarts[p],binints[p])
}
#nice, so now have intervals. create the rows
if(rowtype=="FG"){
rows = data.frame(row[,1:5],startends,row[,8:9])
}else if(rowtype=="db"){
rows = data.frame(row[,1],startends,row[,3],type)
}
data=data[-which(data$index==n),]
return(rows)
}else{
return(NULL)
}
}
newrows =do.call("rbind",newrows)
newrows
if(!is.null(newrows)){
if(rowtype=="FG"){
colnames(newrows)[c(6,7)]<-c("SegStart","SegDur")
}else if(rowtype=="db"){
colnames(newrows)[c(2,3)]<-c("SegStart","SegDur")
}
data=rbind(newrows,data)
}
View(data)
data<-data[order(data$index,data$SegStart),] #original order
data$index<-NULL
soundfiles()$table_clear()
sfs=read.csv("C:/Users/daniel.woodrich/Desktop/database/soundfiles.csv")
soundfiles()$insert(sfs)
breakbins<-function(data,binlen,type,colname_dur = "Duration",rowtype= "db"){
#condition: if the row has a higher duration than the max of the bins, break it into multiple until condition is satisfied
data$index<-1:nrow(data)
newrows<-foreach(n=1:nrow(data)) %do% {
#for(n in 1:nrow(data)){
row = data[which(data$index==n),]
#go row by row. if duration > binlen, expand row, delete old row, and stich back in.
if(row[,colname_dur]>binlen){
if(row[,colname_dur]%%binlen==0){
binints = rep(binlen,row[,colname_dur]/binlen)
binstarts = c(0,cumsum(binints))
}else{
secs = sum(rep(binlen,row[,colname_dur]/binlen))
binints = c(rep(binlen,row[,colname_dur]/binlen),row[,colname_dur]-secs)
binstarts= c(0,cumsum(binints))
}
startends<-matrix(nrow=length(binints),ncol=2)
for(p in 1:length(binints)){
startends[p,]<-c(binstarts[p],binints[p])
}
#nice, so now have intervals. create the rows
if(rowtype=="FG"){
rows = data.frame(row[,1:5],startends,row[,8:9])
}else if(rowtype=="db"){
rows = data.frame(row[,1],startends,row[,3],type)
}
data=data[-which(data$index==n),]
return(rows)
}else{
return(NULL)
}
}
newrows =do.call("rbind",newrows)
if(!is.null(newrows)){
if(rowtype=="FG"){
colnames(newrows)[c(6,7)]<-c("SegStart","SegDur")
}else if(rowtype=="db"){
colnames(newrows)[c(2,3)]<-c("SegStart","SegDur")
}
data=rbind(newrows,data)
}
data<-data[order(data$index,data$SegStart),] #original order
data$index<-NULL
return(data)
}
bincategories<-c("LOW","MID","HIGH")
binlengths<-c(300,225,90)
out=foreach(i=1:length(binlengths)) %do% {
return(breakbins(data,binlengths[i],bincategories[i]))
}
out=foreach(i=1:length(binlengths)) %do% {
return(breakbins(sfs,binlengths[i],bincategories[i]))
}
i
i=1
breakbins(sfs,binlengths[i],bincategories[i])
source("classes.R")
breakbins(sfs,binlengths[i],bincategories[i])
source("classes.R")
breakbins(sfs,binlengths[i],bincategories[i])
data=sfs
binlen=225
type="MID"
colname_dur = "Duration"
rowtype= "db"
data$index<-1:nrow(data)
newrows<-foreach(n=1:nrow(data)) %do% {
#for(n in 1:nrow(data)){
row = data[which(data$index==n),]
#go row by row. if duration > binlen, expand row, delete old row, and stich back in.
if(row[,colname_dur]>binlen){
if(row[,colname_dur]%%binlen==0){
binints = rep(binlen,row[,colname_dur]/binlen)
binstarts = c(0,cumsum(binints))
}else{
secs = sum(rep(binlen,row[,colname_dur]/binlen))
binints = c(rep(binlen,row[,colname_dur]/binlen),row[,colname_dur]-secs)
binstarts= c(0,cumsum(binints))
}
startends<-matrix(nrow=length(binints),ncol=2)
for(p in 1:length(binints)){
startends[p,]<-c(binstarts[p],binints[p])
}
#nice, so now have intervals. create the rows
if(rowtype=="FG"){
rows = data.frame(row[,1:5],startends,row[,8:9])
}else if(rowtype=="db"){
rows = data.frame(row[,1],startends,row[,3:4],type)
}
data=data[-which(data$index==n),]
return(rows)
}else{
return(NULL)
}
}
newrows =do.call("rbind",newrows)
View(newrows)
View(newrows)
head(sfs)
sfs=rbind(newrows,sfs)
head(data)
if(!is.null(newrows)){
if(rowtype=="FG"){
colnames(newrows)[c(6,7)]<-c("SegStart","SegDur")
}else if(rowtype=="db"){
colnames(newrows)[c(2,3)]<-c("SegStart","SegDur")
}
data=rbind(newrows,data)
}
View(data)
data<-data[order(data$index,data$SegStart),]
data
data$index<-NULL
source("classes.R")
soundfiles()$table_clear()
soundfiles()$insert(sfs)
soundfiles()$table_clear()
soundfiles()$insert(sfs)
bins()$view_()
source("classes.R")
soundfiles()$table_clear()
soundfiles()$insert(sfs)
